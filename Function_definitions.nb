WolframModelObjectProperties[
  x_WolframModelEvolutionObject] := {RulePlot[
   ResourceFunction["WolframModel"][x["Rules"]]], 
  x[0], 
  x["FinalState"];,
   ListLinePlot[{x["VertexCountList"], 
    Table[If[(E^i) <= x["VertexCountList"][[-1]], E^i, Nothing], {i, 
      0, 10}]}],
   ListLinePlot[{x["EdgeCountList"], 
    Table[If[(E^i) <= x["EdgeCountList"][[-1]], E^i, Nothing], {i, 0, 
      10}]}], 
   ListLinePlot[
   Map[GraphDiameter, 
    Map[UndirectedGraph, 
     Map[ResourceFunction["HypergraphToGraph"], x["StatesList"]]]]], 
  ResourceFunction["ConnectedHypergraphQ"][x["FinalState"]]}

WolframModelObjectProperties :: usage = 
  "WolframModelObjectProperties takes a WolframModelEvolutionObject \
as an input. It gives the list of: its underlying Rules, Initial \
State, Final State, Line Plot of its vertex and edge counts at each \
stage, plot of diameter at all states, and whether the hypergraph is \
final connected or not.";

WolframModelSignGrowthCon[x_] := 
 Table[If[ResourceFunction["ConnectedHypergraphQ"]
     [ResourceFunction["WolframModel"][i, Keys[i], 3, "FinalState"]] && 
    Length@
      ResourceFunction["WolframModel"][i, Keys[i], 3, 
       "EdgeCountList"] > 2, 
   ResourceFunction["WolframModel"][i, Keys[i], 10], Nothing],
  {i, ResourceFunction["EnumerateWolframModelRules"][x]}]

WolframModelSignGrowthCon::usage = 
  "WolframModelSignGrowthCon takes in a signature [x] and returns the \
output of WolframModel[x, Keys[x], 10] minus the rules for which the \
hypergraph at 3rd step is disconnected or does not grow after 3 \
steps.";

WolframModelMultiSignGrowthCon[x_] := Module[Rules,
  Rules = Map[ResourceFunction["EnumerateWolframModelRules"],  x];
  Table[If[
    ResourceFunction["ConnectedHypergraphQ"][
      ResourceFunction["WolframModel"][i, Keys[i[[1]]], 3, 
       "FinalState"]] && 
     Length@
       ResourceFunction["WolframModel"][i, Keys[i[[1]]], 3, 
        "EdgeCountList"] > 2, 
    ResourceFunction["WolframModel"][i, Keys[i[[1]]], 10], Nothing],
   {i, Table[
     Map[RandomChoice, Rules], {j, 
      Quotient[Max[Map[Length, Rules]], 10]*3}]}]]

WolframModelMultiSignGrowthCon::usage = "WolframModelMultiSignGrowth \
takes in a list of signatures and returns a \
WolframModelEvolutionObject for a random set of rules of the \
signatures given in x for all the connected and non-terminating."

WolframModelLinearFilter[x_WolframModelEvolutionObject] := 
 Switch[FindLinearRecurrence /@ {x["VertexCountList"], 
    x["EdgeCountList"]},
  {{2, -1}, {2, -1}}, Nothing,
  {{1}, {2, -1}}, Nothing, 
  {{2, -1}, {1}}, Nothing,
  {{1}, {1}}, Nothing,
  {{2, -1}, FindLinearRecurrence[x["EdgeCountList"]]}, Nothing,
  {{1}, FindLinearRecurrence[x["EdgeCountList"]]}, Nothing,
  {FindLinearRecurrence[x["VertexCountList"]], {2, -1}}, Nothing,
  {FindLinearRecurrence[x["VertexCountList"]], {1}}, Nothing,
   _, x]

WolframModelLinearFilter::usage = 
  "WolframModelLinearFilter takes a WolframModelEvolutionObject as an \
input and returns the object unchanged if it does not show a linear \
growth rate. It returns Nothing otherwise.";

WolframModelObjectAsymptotic[
  x_WolframModelEvolutionObject] := {Table[
   Asymptotic[FindSequenceFunction[y][i], 
    i -> Infinity], {y, {x["VertexCountList"], x["EdgeCountList"]}}], 
  x}

WolframModelObjectAsymptotic::usage = 
  "WolframModelObjectVertexAsymptotic function takes in a \
WolframModelEvolutionObject (x) and returns a list of the limit \
symbolic expression of the growth rate of x[VertexCountList], \
x[EdgeCountList] and x itself.";

WolframModelExponentialFilter[x_] := Which[
  MatchQ[x[[1]][[1]], 
   HoldPattern[_Integer*(_Integer^(_Integer + _Integer*_Symbol))]], 
  Nothing,
  MatchQ[x[[1]][[1]], 
   HoldPattern[_Integer^(_Integer + _Integer*_Symbol)]], Nothing, 
  MatchQ[x[[1]][[1]], HoldPattern[_Integer^(_Integer*_Symbol)]], 
  Nothing, 
  MatchQ[x[[1]][[1]], HoldPattern[_Integer^(_Symbol)]], Nothing, 
  MatchQ[x[[1]][[1]], 
   HoldPattern[_Integer*(_Integer^(_Integer*_Symbol))]], Nothing, 
  MatchQ[x[[1]][[1]], HoldPattern[_Integer*(_Integer^(_Symbol))]], 
  Nothing, 
  MatchQ[x[[1]][[1]], 
   HoldPattern[_Integer*(_Integer^(_Integer + _Symbol))]], Nothing, 
  MatchQ[x[[1]][[1]], HoldPattern[_Integer^(_Integer + _Symbol)]], 
  Nothing, 
  MatchQ[x[[1]][[2]], 
   HoldPattern[_Integer*(_Integer^(_Integer + _Integer*_Symbol))]], 
  Nothing,
  MatchQ[x[[1]][[2]], 
   HoldPattern[_Integer^(_Integer + _Integer*_Symbol)]], Nothing, 
  MatchQ[x[[1]][[2]], HoldPattern[_Integer^(_Integer*_Symbol)]], 
  Nothing, 
  MatchQ[x[[1]][[2]], HoldPattern[_Integer^(_Symbol)]], Nothing, 
  MatchQ[x[[1]][[2]], 
   HoldPattern[_Integer*(_Integer^(_Integer*_Symbol))]], Nothing, 
  MatchQ[x[[1]][[2]], HoldPattern[_Integer*(_Integer^(_Symbol))]], 
  Nothing, 
  MatchQ[x[[1]][[2]], 
   HoldPattern[_Integer*(_Integer^(_Integer + _Symbol))]], Nothing, 
  MatchQ[x[[1]][[2]], HoldPattern[_Integer^(_Integer + _Symbol)]], 
  Nothing,
  True, x[[2]]]

WolframModelExponentialFilter::usage = 
  "This function takes in the output of WolframModelObjectAsymptote \
and returns nothing if the growth rate is exponential. It returns the \
WolframModelEvolutionObject otherwise.";

WolframModelInterestingRules[x_] := 
 Column[Map[WolframModelObjectProperties,  
   Map[WolframModelExponentialFilter, 
    Map[WolframModelObjectAsymptotic, 
     Map[WolframModelLinearFilter, 
      If[Length[x] > 1, WolframModelMultiSignGrowthCon[x], 
       WolframModelSignGrowthCon[x]]]]]]]

WolframModelInterestingRules::usage = 
  "WolframModelInterestingRules takes in a signature or a list of \
signatures as an input. It then returns the output of \
WolframModelObjectProperties for the rules which give connected, \
non-terminating, non-linear growth, and non-exponential growth \
models.";
